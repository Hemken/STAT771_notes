[
["index.html", "STAT 771: My notes Intro", " STAT 771: My notes Ralph Møller Trane Fall 2018 (compiled 2018-09-20) Intro "],
["lecture-notes.html", "Chapter 1 Lecture Notes Lecture 1: 9/6 1.1 Positional numeral system 1.2 Floating Point Format 1.3 IEEE Standards Lecture 2: 9/11 1.4 Errors Lecture 3: 9/13 1.5 Square Linear Systems 1.6 Orthogonalization Lecture 4: 9/18 Lecture 5: 9/20", " Chapter 1 Lecture Notes Lecture 1: 9/6 Goals for the first few lectures: Develop basic understanding of floating point numbers (fp numbers) Develop some basic notions of errors and their consequences References: David Goldberg (1991) John D. Cook (2009) Hingham (2002) 1.1 Positional numeral system We assume we have a decimal representation of numbers. I.e. that it exists. It is not within the scope of this class to prove this. Now, this is NOT the optimal way for a computer to represent numbers. For various reasons, there are more desirable ways to store numbers. So we need a different way of representing the numbers. Ingredients for different representation: A base, refered to as \\(\\beta\\). It holds that \\(\\beta \\in {2,3,4,...}\\) A significand: a sequence of digits: \\(d_0.d_1d_2d_3d_4...\\), where \\(d_j \\in \\{0, 1,...,\\beta-1\\}\\) An exponent: \\(e \\in \\mathbb{Z}\\). The representation \\(d_0.d_1d_2... \\times \\beta^e\\) means \\(\\left(d_0 + d_1\\cdot \\beta^{-1} + ... + d_{p-1}\\beta^{-(p-1)}\\right)\\cdot \\beta^e\\). 1.2 Floating Point Format Definition 1.1 A fp is one that can be represented in a base \\(\\beta\\) with a fixed digit \\(p\\) (precision), and whose exponent is between \\(e_{min}\\) and \\(e_{max}\\). Example 1.1 Let \\(\\beta = 10, p = 3, e_{min} = -1, e_{max} = 1\\). Want to represent \\(0.1\\). Several options: Let d_0=0, d_1 = 0, d_2 = 1, e = 1. Let d_0=0, d_1 = 1, d_2 = 0, e = 0. d_0 = 1, d_1 = 0, d_2 = 0, e = -1. If we fill into the equation above, we get 0.1: \\[\\begin{align*} i: &amp; \\left(0 + 0\\cdot 10^{-1} + 1\\cdot 10^{-2}\\right)\\cdot 10^{1} \\\\ ii: &amp; \\left(0 + 1\\cdot 10^{-1} + 1\\cdot 10^{-2}\\right)\\cdot 10^{0} \\\\ iii:&amp; \\left(1 + 0\\cdot 10^{-1} + 1\\cdot 10^{-2}\\right)\\cdot 10^{-1} \\end{align*}\\] Definition 1.2 A fp number is said to be normalized if \\(d_0 \\neq 0\\). Exercise 1.1 What is the total number of values that can be represented in the normalized fp format with base \\(\\beta, p, e_{min}, e_{max}\\)? We count the different values each of the elements of a fp can take: \\(d_0\\) can be from 1 to \\(\\beta-1\\), so \\(\\beta-1\\) different values. \\(d_1,...,d_{p-1}\\) each takes a value in \\(\\{0,1,...,\\beta-1\\}\\). Hence, we can choose the digits \\(d_1,...,d_{p-1}\\) in \\(\\beta^{p-1}\\) different ways. \\(e\\) can take \\(e_{max} - e_{min} + 1\\) different values (all integers from \\(e_{min}\\) to \\(e_{max}\\), both included, hence the \\(+1\\)). So, in total, there are \\((\\beta-1)\\cdot \\beta^{p-1}\\cdot (e_{max} - e_{min} + 1)\\) different values that can be represented in the normalized fp format with base \\(\\beta\\), precision \\(p\\), and \\(e_{min}, e_{max}\\) given. 1.3 IEEE Standards IEEE have standards for how to deal with approximations and errors. For our purposes, a bit is a single unit of storage on a computer, which can either be 0 or 1. Hence, we’ll be focusing on fp formats where \\(\\beta = 2\\). 1.3.1 The 16 bit standard (half precision standard). The 16 bits of storage are used in the following way, when following the 16 bit standard: 1 bit for the sign 0 = positive 1 = negative 5 bits for the exponent 00000 is reserved for 0 11111 is reserved for \\(\\infty\\) 30 exponents left: \\(2^5 - 2 = 30\\) the 16 bit standard dictates that the used exponents are \\(-14,...,15\\). Note: \\(0\\) is also included in this list of 30 exponents. This is because the \\(00000\\) representation is reserved for integers, while \\(01111\\) is used with non-integers. 11 bit for the significand. 10 are actually stored – we always work with normalized FP numbers, i.e. \\(\\beta_0 = 1\\). Question: What are smallest and largest positive numbers that can be represented? Answer: Smallest non-normalized number would be the one with the smallest possible exponent, and all digits of the significand are 0 except the very last one. So, the smallest non-normalized FP number in the 16 bit standard would be \\[ \\left(0 + 0\\cdot 2^{-1} + ... + 0\\cdot 2^{-9} + 1\\cdot 2^{-10}\\right)\\cdot 2^{-14} = 2^{-24} \\approx 5.96\\cdot 10^{-8} \\] The smallest normalized number is the one with all digits \\(0\\) (except for the leading digit, of course, which has to be \\(1\\) for it to be normalized), and \\(e = -14\\). So the smallest normalized FP number: \\[ \\left(1 + 0\\cdot 2^{-1} + ... + 0\\cdot 2^{-10}\\right)\\cdot 2^{-14} = 2^{-14} \\approx 6.10\\cdot 10^{-5} \\] Finally, the largest (finite) FP number in the 16 bit standard is the one where the exponent is as large as possible (\\(e = 15\\)), and all digits are \\(1\\). So \\[ \\left(1 + 1\\cdot 2^{-1} + ... + 1\\cdot 2^{-10}\\right)\\cdot 2^{15} = 65504 \\] Lecture 2: 9/11 1.3.2 The 32 bit standard (single precision) The 32 bits of storage are used in the following way, when following the 32 bit standard: 1 bit for the sign 0 = positive 1 = negative 8 bits for the exponent 00000000 is reserved for 0 11111111 is reserved for \\(\\infty\\) exponents left: \\(2^8 - 2 = 254\\) the 32 bit standard dictates that the used exponents are \\(-126,...,127\\). Note: \\(0\\) is also included in this list of the 254 exponents. This is because the \\(00000000\\) representation is reserved for integers, while \\(01111111\\) (I think this is the representation for \\(0\\) here…) is used with non-integers. 24 bit for the significand. 23 are actually stored – we always work with normalized FP numbers, i.e. \\(\\beta_0 = 1\\). Question: What are smallest and largest positive numbers that can be represented in the 32 bit standard? Answer: Smallest non-normalized number would be the one with the smallest possible exponent, and all digits of the significand are 0 except the very last one. So, the smallest non-normalized FP number in the 32 bit standard would be \\[ \\left(0 + 0\\cdot 2^{-1} + ... + 0\\cdot 2^{-22} + 1\\cdot 2^{-23}\\right)\\cdot 2^{-126} = 2^{-149} \\approx 1.40\\cdot 10^{-45} \\] The smallest normalized number is the one with all digits \\(0\\) (except for the leading digit, of course, which has to be \\(1\\) for it to be normalized), and \\(e = -126\\). So the smallest normalized FP number: \\[ \\left(1 + 0\\cdot 2^{-1} + ... + 0\\cdot 2^{-23}\\right)\\cdot 2^{-126} = 2^{-126} \\approx 1.18\\cdot 10^{-38} \\] Finally, the largest (finite) FP number in the 32 bit standard is the one where the exponent is as large as possible (\\(e = 127\\)), and all digits are \\(1\\). So \\[ \\left(1 + 1\\cdot 2^{-1} + ... + 1\\cdot 2^{-126}\\right)\\cdot 2^{127} = 3.40\\cdot 10^{38} \\] 1.3.3 The 64 bit standard (double precision) The 64 bits of storage are used in the following way, when following the 64 bit standard: 1 bit for the sign 0 = positive 1 = negative 11 bits for the exponent 00000000 is reserved for 0 11111111 is reserved for \\(\\infty\\) exponents left: \\(2^11 - 2 = 2046\\) the 64 bit standard dictates that the used exponents are \\(-1024,...,1023\\). Note: \\(0\\) is also included in this list of the 254 exponents. This is because the \\(00000000\\) representation is reserved for integers, while \\(01111111\\) (I think this is the representation for \\(0\\) here…) is used with non-integers. 53 bit for the significand. 52 are actually stored – we always work with normalized FP numbers, i.e. \\(\\beta_0 = 1\\). 1.4 Errors 1.4.1 Units in the Last Place (ULP) 1.4.2 Absolute and Relative Error Let \\(fl: \\mathbb{R}_{\\geq 0} \\rightarrow \\mathcal{S}\\) be a function that takes a real value and return a FP number. Then we define the absolute and relative error as follows: Definition 1.3 Let \\(z \\in \\mathbb{R}_{\\geq 0}\\). The absolute error is defined as \\[ \\left | fl(z) - z \\right | . \\] The relative error is defined as \\[ \\left | \\frac{fl(z)-z}{z} \\right | \\] Lemma 1.1 If \\(z\\) has exponent \\(e\\), then the maximum absolute error is \\(\\frac{\\beta^{e-p+1}}{2}\\). Proof. Lemma 1.2 If \\(z\\) has exponent \\(e\\), then the maximum relative error is \\(\\frac{\\beta^{1-p}}{2}\\). Proof. If \\(z\\) has exponent \\(e\\), then \\(\\beta^{e}\\leq z\\). Using this with 1.1, we get that \\[ \\left | \\frac{fl(z)-z}{z} \\right | \\leq \\frac{\\beta^{e-p+1}}{2\\beta^e} = \\frac{\\beta^{1-p}}{2}. \\] Note: the upper bound of the relative error is called the machine epsilon. This can be obtained in Julia using the function eps. 1.4.2.1 The Fundamental Axiom … is that for any of the four arithmetic operations (\\(+, -, \\cdot, /\\)), we have the following error bound: \\[ fl(x \\text{op} y) = (x \\text{op} y)(1+\\delta), \\] with \\(|\\delta| \\leq u\\), where \\(u\\) is commonly \\(2\\cdot \\epsilon\\). (NOTE: NEED TO CLARIFY IF THE ABOVE IS CORRECT!) **Example:* Matrix storage. Let \\(A \\in \\mathbb{R}^{m\\times n}\\). Then: \\[ \\left| fl(A) - A \\right | \\leq u \\left | A \\right | \\] Example: Dot product. Let \\(x,y \\in \\mathbb{R}^{n}\\). Recall that the dot product of \\(x\\) and \\(y\\) is definted as \\(x&#39;y = \\sum_{i=1}^{n} x_i \\cdot y_i\\). This can be calculated in the following way: fl = function(x,y) # Get length of x n = length(x) # Check that length of y is equal to length of x. If not, throw error. if(length(y) != n) return &quot;ERROR: y does not have same dimension as x&quot; end # s will be the result of the dot product calculation s = 0 for i = 1:n s += x[i]*y[i] end return(s) end Next we want to prove the following lemma: Lemma 1.3 Let \\(x,y \\in \\mathbb{R}^n\\), and \\(n\\cdot u \\leq 0.01\\). Then \\[ \\left | fl(x&#39;y) - x&#39;y \\right | \\leq 1.01 \\cdot n\\cdot u \\cdot \\left|x\\right|&#39;\\left|y\\right| \\] Lecture 3: 9/13 To prove the lemma above, we will need another lemma… Lemma 1.4 If \\(|\\delta_i| \\leq u, \\forall i=1,\\ldots,n\\) s.t. \\(n\\cdot u &lt; 2\\). Let \\(1 + \\eta = \\prod_{i=1}^{n}(1 + \\delta_i)\\). Then \\[ |\\eta | \\leq \\frac{n\\cdot u}{1-\\tfrac{n\\cdot u}{2}} \\] Proof. Using the definition of \\(\\nu\\), we can rewrite it to get \\[ | \\eta | = \\left | \\prod_{i=1}^n (1 + \\delta_i) - 1 \\right |. \\] By induction, we will show that the expression above is less than or equal to \\((1 + u)^n - 1\\). [TO BE COMPLETED!] Since \\(1+u \\leq e^{u}\\) for all \\(u \\in {\\mathbb{R}}\\), we have that \\[\\begin{align*} | \\eta | &amp;\\leq e^{n\\cdot u} - 1 \\\\ &amp;\\leq n\\cdot u + \\frac{(n\\cdot u)^2}{2!} + \\frac{(n\\cdot u)^3}{3!} + \\ldots \\text{(used the Taylor expansion)}\\\\ &amp;\\leq n\\cdot u + \\frac{(n\\cdot u)^2}{2^1} + \\frac{(n\\cdot u)^3}{2^2} + \\frac{(n\\cdot u)^4}{2^3} + \\ldots (\\text{used that } x! &gt; 2^{x-1} \\text{ for } x &gt; 1) \\\\ &amp;= \\sum_{k=0}^{\\infty} n\\cdot u \\left(\\frac{n\\cdot u}{2}\\right)^k \\text{\\small (identify this as a geometric series with } r = \\tfrac{n\\cdot u}{2} \\text{, \\small which is less than 1 by assumption)} \\\\ &amp;= \\frac{n\\cdot u}{1-\\tfrac{n\\cdot u}{2}}, \\end{align*}\\] which is exactly what we wanted. With this in hand, we will prove the previously stated lemma. Proof. Let \\(s_p\\) denote the value of \\(s\\) after the \\(p\\)’th iteration of the algorithm described above. Then, since we’re assuming the Fundamental Axiom, we have that \\(s_1 = fl(x_1y_y) = x_1 y_1 (1 + \\delta_1)\\), where \\(|\\delta_1| \\leq u\\). We can similarly find \\(s_p\\) as \\[\\begin{align*} s_p &amp;= fl(s_{p-1} + fl(x_p y_p)) \\\\ &amp;= (s_{p-1} + fl(x_p y_p))(1 + \\epsilon_p) (\\text{where } |\\epsilon_p| \\leq u) \\\\ &amp;= (s_{p-1} + x_py_p(1 + \\delta_p))(1 + \\epsilon_p) (\\text{where } |\\delta_p| \\leq u). \\end{align*}\\] Let \\(\\epsilon_1 = 0\\). \\(s_p\\) is a recursive formula, and can be rewritten as follows: \\[ s_p = \\sum_{i=1}^p x_iy_i (1 + \\delta_i)\\prod_{j=1}^p (1 + \\epsilon_j). \\] So, \\[\\begin{align*} | s_n - x^\\prime y | &amp;= \\left | \\sum_{i=1}^n (x_i y_i)(1 + \\delta_i)\\prod_{j=1}^p (1 + \\epsilon_j) - \\sum_{i=1}^{n}x_iy_i\\right | \\\\ &amp;= \\left | \\sum_{i=1}^n (x_i y_i)\\left((1 + \\delta_i)\\prod_{j=1}^p (1 + \\epsilon_j) - 1 \\right) \\right | \\\\ &amp;\\leq \\sum_{i=1}^n \\left |x_i y_i \\right |\\left | (1 + \\delta_i)\\prod_{j=1}^p (1 + \\epsilon_j) - 1 \\right| . \\end{align*}\\] We now use 1.4 to get: \\[\\begin{align*} \\sum_{i=1}^n \\left |x_i y_i \\right |\\left | (1 + \\delta_i)\\prod_{j=1}^p (1 + \\epsilon_j) - 1 \\right| &amp;\\leq \\frac{nu}{1-\\tfrac{nu}{2}} \\sum_{i=1}^n \\left |x_i y_i \\right | \\\\ &amp;\\leq \\frac{nu}{0.995} \\sum_{i=1}^n |x_i| |y_i | \\\\ &amp;\\leq 1.01 \\cdot nu \\cdot |x|^\\prime |y| \\end{align*}\\] 1.5 Square Linear Systems In the following, let \\(A \\in {\\mathbb{R}}^{n \\times m}\\) be an invertible matrix, and assume \\(Ax = b\\) for a \\(b \\neq 0\\). This implies that \\(x = A^{-1}b\\). Theorem 1.1 Let \\(\\kappa_\\infty = {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}_\\infty {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert}_\\infty\\). Assume we can store \\(A\\) with precision \\(E\\) (i.e. as \\(A+E\\)), where \\({\\left \\vert \\left \\vert E \\right \\vert \\right \\vert}_\\infty \\leq u {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}_\\infty\\), and \\(b\\) with precision \\(e\\) (i.e. as \\(b+e\\)), where \\({\\left \\vert \\left \\vert e \\right \\vert \\right \\vert}_\\infty \\leq u {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert}_\\infty\\). If \\({\\left \\vert \\left \\vert A+E \\right \\vert \\right \\vert}\\hat{x} = b+e\\) and \\(u\\cdot \\kappa_\\infty &lt; 1\\), then \\[ \\frac{{\\left \\vert \\left \\vert x-\\hat{x} \\right \\vert \\right \\vert}_\\infty}{{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}} \\leq \\frac{2\\cdot u \\cdot \\kappa_\\infty}{1-u\\cdot \\kappa_\\infty} \\] Lemma 1.5 Let \\(I\\in {\\mathbb{R}}^{n \\times n}\\) be the identity matrix, and \\(F \\in {\\mathbb{R}}^{n\\times n}\\) s.t. \\({\\left \\vert \\left \\vert F \\right \\vert \\right \\vert}_p &lt; 1\\) for some \\(p \\in [1,\\infty]\\). Then \\(I-F\\) is invertible, and \\[ {\\left \\vert \\left \\vert (I-F)^{-1} \\right \\vert \\right \\vert}_p \\leq \\frac{1}{1-{\\left \\vert \\left \\vert F \\right \\vert \\right \\vert}_p} \\] Proof. HOMEWORK Lemma 1.6 Suppose \\(\\exists \\epsilon &gt; 0\\) s.t. \\({\\left \\vert \\left \\vert \\Delta A \\right \\vert \\right \\vert} \\leq \\epsilon {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}\\) and \\({\\left \\vert \\left \\vert \\Delta b \\right \\vert \\right \\vert} \\leq \\epsilon {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert}\\), and \\(y\\) s.t. \\((A+\\Delta A)y = b+\\Delta b\\). If \\(\\epsilon {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} = r &lt; 1\\), then \\(A+\\Delta A\\) is invertible and \\[\\frac{{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}} \\leq \\frac{1+r}{1-r}.\\] Proof. Note that \\(A+\\Delta A = A\\left (I + A^{-1}\\Delta A\\right ) = A\\left (I - \\left(- A^{-1}\\Delta A\\right)\\right)\\). Since \\({\\left \\vert \\left \\vert -A^{-1}\\Delta A \\right \\vert \\right \\vert} = {\\left \\vert \\left \\vert A^{-1}\\Delta A \\right \\vert \\right \\vert} \\leq \\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert}\\cdot {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert} &lt; 1\\) (by assumptions), Lemma 1.5 gives us that \\(I + A^{-1}\\Delta A\\) is invertible. Since \\(A\\) is also invertible (again, by assumption), \\(A+\\Delta A\\) is invertible (product of two invertible matrices is invertible). Performing some linear algebra: \\[\\begin{align*} (A + \\Delta A) &amp;= b + \\Delta b \\Leftrightarrow \\\\ A(I + A^{-1} \\Delta A) y &amp;= b + \\Delta b \\Leftrightarrow \\\\ (I + A^{-1} \\Delta A) y &amp;= A^{-1}b + A^{-1}\\Delta b \\Leftrightarrow \\\\ y &amp;= (I + A^{-1} \\Delta A)^{-1} A^{-1}b + A^{-1}\\Delta b. \\end{align*}\\] Remember that \\(A^{-1}b = x\\). From the definition of \\(r\\) we have that \\({\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} = \\frac{r}{{\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}}\\). These two identities with the assumption that \\({\\left \\vert \\left \\vert \\Delta b \\right \\vert \\right \\vert} \\leq \\epsilon b\\) gives us \\[ \\begin{aligned} {\\left \\vert \\left \\vert y \\right \\vert \\right \\vert} &amp;\\leq {\\left \\vert \\left \\vert (I + A^{-1}\\Delta A)^{-1} \\right \\vert \\right \\vert} \\left( {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + {\\left \\vert \\left \\vert A^{-1}\\Delta b \\right \\vert \\right \\vert}\\right) \\\\ &amp;\\leq \\frac{1}{1-{\\left \\vert \\left \\vert A^{-1}\\Delta A \\right \\vert \\right \\vert}} \\left( {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + \\frac{r}{\\epsilon {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}} \\cdot {\\left \\vert \\left \\vert \\Delta b \\right \\vert \\right \\vert} \\right) \\\\ &amp;\\leq \\frac{1}{1-r} \\left( {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + \\frac{r}{\\epsilon {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}} \\cdot \\epsilon {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert} \\right) \\\\ &amp;= \\frac{1}{1-r} \\left( {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + \\frac{r \\cdot {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}} \\right). \\end{aligned} \\] Finally, recall that \\(Ax=b\\), hence \\({\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}\\cdot{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} \\geq {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert}\\), so \\({\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} \\geq \\frac{{\\left \\vert \\left \\vert b \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}}\\). So, \\[ \\begin{aligned} {\\left \\vert \\left \\vert y \\right \\vert \\right \\vert} \\leq \\frac{1}{1-r} \\left( {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + r \\cdot {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} \\right) \\Leftrightarrow \\\\ \\frac{{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}} \\leq \\frac{1+r}{1-r}. \\end{aligned} \\] Lemma 1.7 \\[\\frac{{\\left \\vert \\left \\vert y - x \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}} \\leq \\frac{2\\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert}\\cdot {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}}{1-r}.\\] Proof. \\[ \\begin{aligned} \\left(A+\\Delta A\\right)y &amp;= b + \\Delta b \\Leftrightarrow \\\\ Ay - b &amp;= \\Delta b - \\Delta Ay \\Leftrightarrow \\\\ y - A^{-1}b &amp;= A^{-1} \\Delta b - A^{-1}\\Delta A y \\Leftrightarrow \\\\ y - x &amp;= A^{-1} \\Delta b - A^{-1}\\Delta A y \\Leftrightarrow \\\\ {\\left \\vert \\left \\vert y - x \\right \\vert \\right \\vert} &amp;\\leq {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert \\Delta b \\right \\vert \\right \\vert} + {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert \\Delta A \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert} \\\\ &amp;\\leq {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} \\epsilon {\\left \\vert \\left \\vert b \\right \\vert \\right \\vert} + {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} \\epsilon{\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert} \\\\ &amp;\\leq \\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + \\epsilon{\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert} \\\\ &amp;\\leq \\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}\\left({\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + {\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}\\right) \\\\ &amp;= \\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert}\\left({\\left \\vert \\left \\vert x \\right \\vert \\right \\vert} + \\frac{1+r}{1-r}{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}\\right) \\Leftrightarrow \\\\ \\frac{{\\left \\vert \\left \\vert y-x \\right \\vert \\right \\vert}}{{\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}} &amp;\\leq \\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert} \\left(\\frac{1-r}{1-r} + \\frac{1+r}{1-r}\\right) \\\\ &amp;= 2\\epsilon {\\left \\vert \\left \\vert A^{-1} \\right \\vert \\right \\vert} {\\left \\vert \\left \\vert A \\right \\vert \\right \\vert} \\frac{1}{1-r} \\end{aligned} \\] 1.6 Orthogonalization Goals Introduce and prove the existence of QR decomposition Overview of the algorithm to perfor QR decomposition Solve least squares problems “Large” data problems Outline Motivating problems and solutions with QR Gram-Schmidt procedure, existence of QR Householder, Givens “Large” least squares problems datadown 1.6.1 Motivating problems Example 1.2 (Motivating Problem 1 (Consistent Linear System)) Assume \\(A \\in {\\mathbb{R}}^{n\\times m}, n \\geq m, \\text{rank}(A) = m\\), and \\(b \\in \\text{range}(A) \\subset R^m\\). Find \\(x \\in {\\mathbb{R}}^m\\) s.t. \\(Ax = b\\). Example 1.3 (Motivating Problem 2 (Least Squares Regression)) Assume \\(A \\in {\\mathbb{R}}^{n\\times m}, n \\geq m, \\text{rank}(A) = m\\), and \\(b \\in R^n\\). Find \\(x \\in {\\mathbb{R}}^m\\) s.t. \\[x \\in {\\text{argmin}}_{y \\in {\\mathbb{R}}^m} {\\left \\vert \\left \\vert Ay-b \\right \\vert \\right \\vert}_2.\\] Example 1.4 (Motivating Problem 3 (Underdetermined Linear System) Assume \\(A \\in {\\mathbb{R}}^{n\\times m}, n \\geq m, \\text{rank}(A) &lt; m\\), and \\(b \\in \\text{range}(A)\\). Find \\(x \\in {\\mathbb{R}}^m\\) s.t. \\[x \\in {\\text{argmin}}_{y \\in {\\mathbb{R}}^m} \\left\\{ {\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 \\left | Ay = b \\right\\} \\right . .\\] Example 1.5 (Motivating Problem 4 (Underdetermined Least Squares Regression)) Assume \\(A \\in {\\mathbb{R}}^{n\\times m}, n \\geq m, \\text{rank}(A) &lt; m\\), and \\(b \\in {\\mathbb{R}}^n\\). Find \\(x \\in {\\mathbb{R}}^m\\) s.t. \\[x \\in {\\text{argmin}}_{z \\in {\\mathbb{R}}^m} \\left\\{ {\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left | {\\left \\vert \\left \\vert Ay - b \\right \\vert \\right \\vert}_2 = \\min_{y \\in {\\mathbb{R}}^m} {\\left \\vert \\left \\vert Ay-b \\right \\vert \\right \\vert}_2 \\right\\} \\right . .\\] Example 1.6 (Motivating Problem 5 (Constrained Least Squares Regression)) Assume \\(A \\in {\\mathbb{R}}^{n\\times m}, n \\geq m, \\text{rank}(A) &lt; m\\), and \\(b \\in {\\mathbb{R}}^n\\). Let \\(C \\in {\\mathbb{R}}^{p\\times m}, \\text{C} = p\\), and \\(d \\in {\\mathbb{R}}^{p}\\). Find \\(x \\in {\\mathbb{R}}^m\\) s.t. \\[x = {\\text{argmin}}_{y \\in {\\mathbb{R}}^m} {\\left \\vert \\left \\vert Ay - b \\right \\vert \\right \\vert}_2\\quad \\text{s.t.} \\quad Cy = d.\\] Before we take a crack at solving these problems, we will need to get some definitions down. Definition 1.4 (Permutation Matrix) A permutation matrix is a square matrix such that each column has exactly one element that is \\(1\\), the rest are \\(0\\). Example 1.7 The following is a permutation matrix: \\[ \\begin{bmatrix} 0 &amp; 1 \\\\ 1 &amp; 0 \\end{bmatrix} \\] Definition 1.5 (Orthogonal Matrix) A matrix \\(Q\\) is said to be an orthogonal matrix if \\(Q^T Q = Q Q^T = I\\). Note: for an orthogonal matrix \\(Q \\in {\\mathbb{R}}^{n\\times m}\\), it holds that \\({\\left \\vert \\left \\vert Q_{i*} \\right \\vert \\right \\vert}_2 = 1\\) for all \\(i=1,\\ldots,n\\), and \\({\\left \\vert \\left \\vert Q_{*j} \\right \\vert \\right \\vert}_2 = 1\\) for all \\(j = 1,\\ldots, m\\).1 Definition 1.6 (Upper Triangular Matrix) A matrix \\(R\\) is an upper triangular matrix if \\(R_{ij} = 0\\) for all \\(i&gt;j\\). Lecture 4: 9/18 1.6.2 QR Decomposition In order to actually solve the problems listed above, we need the QR Decomposition: Theorem 1.2 (Existence of QR Decomposition) Let \\(A \\in {\\mathbb{R}}^{n \\times m}\\) and let \\(r = rank(A)\\). Then there exists: an \\(m\\times m\\) permutation matrix \\(\\Pi\\), an \\(n \\times n\\) orthogonal matrix \\(Q\\), an \\(r \\times r\\) upper triangular matrix \\(R\\), with non-zero diagonal elements (i.e. invertible) an \\(r \\times (m-r)\\) matrix S (if \\(m &gt; r\\)), such that \\[ A = Q \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} \\Pi^T. \\] With this in hand, we can solve the motivating problems stated above. Solution (Example 1.2). We want to find \\(x\\) such that \\(Ax = b\\). We use theorem 1.2 to rewrite this as \\(Q \\begin{bmatrix} R \\\\ 0 \\end{bmatrix} \\Pi^T x = b\\). Note that since \\(\\text{rank}(A) = m\\), there is no \\(S\\) matrix. Now, since \\(Q\\) is an orthogonal matrix, we know that \\(Q^{-1} = Q^T\\), so \\[\\begin{equation} \\begin{bmatrix} R \\\\ 0 \\end{bmatrix} \\Pi^T x = Q^T b = c = \\begin{bmatrix} c_1 \\\\ 0 \\end{bmatrix}. \\tag{1.1} \\end{equation}\\] So now the equation we are trying to solve becomes \\[ R \\Pi^T x = c_1. \\] Since \\(R\\) is an upper triangular matrix with non-zero diagonal elements, it is invertible. Since \\(\\Pi\\) is a permutation matrix, \\(\\Pi^{-1} = \\Pi^T\\). Using this we can find the solution: \\[ x = \\Pi R^{-1} c_1. \\] Solution (Example @(exm:least-squares). We want to find \\(x\\) such that \\(x \\in {\\text{argmin}}_{y \\in {\\mathbb{R}}^m}{\\left \\vert \\left \\vert Ay-b \\right \\vert \\right \\vert}_2\\). Once again, \\(\\text{rank}(A) = m\\), so using theorem 1.2, we can rewrite the expression we are trying to minimize as \\[ \\min {\\left \\vert \\left \\vert Q \\begin{bmatrix} R \\\\ 0 \\end{bmatrix}\\Pi^T y - b \\right \\vert \\right \\vert}_2. \\tag{1.2} \\] Since \\(Q^T = Q^{-1}\\) is orthogonal, \\({\\left \\vert \\left \\vert Q^T x \\right \\vert \\right \\vert}_2 = {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}_2\\) for all \\(x\\) (homework exercise 2.28). So, we get that (1.2) is the same as \\[ \\min{\\left \\vert \\left \\vert \\begin{bmatrix} R \\\\ 0 \\end{bmatrix} \\Pi^T y - Q^T b \\right \\vert \\right \\vert}_2. \\] Now let \\(c = Q^T b\\). Then, \\(c\\) is of the form \\(\\begin{bmatrix} c_1 \\\\ c_2 \\end{bmatrix}\\), where \\(c_2\\) is the last \\(n-r\\) rows (i.e. corresponding to the \\(0\\) rows of \\(\\begin{bmatrix} R \\\\ 0 \\end{bmatrix}\\)). Then \\[ \\min{\\left \\vert \\left \\vert \\begin{bmatrix} R \\Pi^T y - c_1 \\\\ -c_2 \\end{bmatrix} \\right \\vert \\right \\vert}_2 = \\min \\sqrt{{\\left \\vert \\left \\vert R \\Pi^T y - c_1 \\right \\vert \\right \\vert}_2^2 + {\\left \\vert \\left \\vert c_2 \\right \\vert \\right \\vert}_2^2}. \\] Now this is minimized by \\({\\text{argmin}}_y {\\left \\vert \\left \\vert R \\Pi^T y - c_1 \\right \\vert \\right \\vert}_2^2\\). As before, \\(R^{-1}\\) exists since \\(R\\) is upper triangular with non-zero diagonal elements, \\(\\Pi^T = \\Pi^{-1}\\) since \\(\\Pi\\) is a permutation matrix, so \\[ \\begin{aligned} x &amp;= {\\text{argmin}}_y {\\left \\vert \\left \\vert R \\Pi^T y - c_1 \\right \\vert \\right \\vert}_2^2 \\Leftrightarrow \\\\ R \\Pi^T x &amp;= c_1 \\Leftrightarrow \\\\ x &amp;= \\Pi R^{-1} c_1. \\end{aligned} \\] Solution (Example 1.4). In this scenario, \\(\\text{rank}(A) = r &lt; m\\). We are looking for \\(x \\in {\\text{argmin}}_{y}\\left\\{{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 \\left | Ay = b\\right\\}\\right .\\). Using theorem 1.2, we can rewrite this as \\({\\text{argmin}}_y\\left\\{{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 | Q\\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} y = b \\right\\}\\), and multiplying by \\(Q^T\\), \\({\\text{argmin}}_y\\left\\{{\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 \\left | \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} y = Q^T b \\right\\} \\right .\\). We introduce the vector \\(c\\) such that \\(Q^T b = \\begin{bmatrix} c &amp; 0 \\end{bmatrix}^T\\) (\\(0\\) entries correspond to \\(0\\) rows in \\(\\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix}\\)). If we furthermore write \\(\\Pi^T y\\) as \\(\\begin{bmatrix} z_1 &amp; z_2 \\end{bmatrix}^T\\). Then, since \\({\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 = {\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2\\), our problem becomes \\[ \\begin{aligned} x &amp;\\in {\\text{argmin}}_z \\left\\{{\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left | R z_1 + S z_2 = c \\right\\}\\right. \\\\ x &amp;\\in {\\text{argmin}}_z \\left\\{{\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left | z_1 = R^{-1} c - R^{-1} S z_2 \\right\\}\\right. \\\\ x &amp;\\in {\\text{argmin}}_z \\sqrt{{\\left \\vert \\left \\vert R^{-1}c - R^{-1} S z_2 \\right \\vert \\right \\vert}_2^2 + {\\left \\vert \\left \\vert z_2 \\right \\vert \\right \\vert}_2^2} \\\\ x &amp;\\in {\\text{argmin}}_z \\left\\{{\\left \\vert \\left \\vert R^{-1}c - R^{-1} S z_2 \\right \\vert \\right \\vert}_2^2 + {\\left \\vert \\left \\vert z_2 \\right \\vert \\right \\vert}_2^2\\right\\}, \\end{aligned} \\] where the last equality is a consequence of the result proved in homework @ref{exr:q403}. Now, let \\(d = R^{-1}c\\) and \\(p = R^{-1}Sz_2\\). Then we can find the minimum of the above expression by differentiating and setting equal to zero: \\[\\begin{align} 0 &amp;= -P^Td + (P^TP + I)z_2 \\rightarrow z_2 &amp;= (P^T P + I)^{-1}P^Td. \\end{align}\\] Solution (Example 1.5). We want to find \\(\\min_z \\left\\{ {\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left \\vert z \\in {\\text{argmin}}_y {\\left \\vert \\left \\vert Ay - b \\right \\vert \\right \\vert}_2\\right\\} \\right .\\) Use theorem 1.2: \\[\\begin{aligned} \\min_z \\left\\{ {\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left \\vert z \\in {\\text{argmin}}_y {\\left \\vert \\left \\vert Ay - b \\right \\vert \\right \\vert}_2\\right\\} \\right . &amp;= \\left\\{ {\\left \\vert \\left \\vert z \\right \\vert \\right \\vert}_2 \\left \\vert z \\in {\\text{argmin}}_y {\\left \\vert \\left \\vert \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} \\Pi^T y - Q^T b \\right \\vert \\right \\vert}_2\\right\\} \\right . \\\\ &amp;= \\left\\{ {\\left \\vert \\left \\vert w \\right \\vert \\right \\vert}_2 \\left \\vert w \\in {\\text{argmin}}_y {\\left \\vert \\left \\vert \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} y - Q^T b \\right \\vert \\right \\vert}_2\\right\\} \\right ., \\end{aligned}\\] since \\({\\left \\vert \\left \\vert y \\right \\vert \\right \\vert}_2 = {\\left \\vert \\left \\vert \\Pi^T y \\right \\vert \\right \\vert}_2\\). This is exactly the problem solved in example 1.4. In conclusion, \\[ w = \\begin{bmatrix} R^{-1}(c_1 - Sy_y) \\\\ y_2 \\end{bmatrix}. \\] Solution (Example 1.6. 1.6.3 Existence of QR-decomposition. To prove the existence of the QR-decomposition, we need the Gram-Schmidt process. Lemma 1.8 (The Gram-Schmidt Process) Let \\(r \\in {\\mathbb{N}}\\). Given a set of linearly independent vectors \\(\\{a_1, \\ldots, a_r\\}\\), there exists a set of orthonormal vectors \\(\\{q_1, \\ldots, q_r\\}\\) such that \\(\\text{span} \\{q_1, \\ldots, q_r\\} = \\text{span}\\{a_1, \\ldots, a_r\\}\\). The \\(q_i\\)’s are given by… Proof. We will prove this by induction. For \\(i=1\\): let \\(R_{11} = {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2\\), \\(q_1 = \\frac{1}{R_11}a_1\\). Notice that \\({\\left \\vert \\left \\vert q_1 \\right \\vert \\right \\vert} = 1\\). (At this point, it might be beneficial to check out the intuitive side note (1.1)) Define \\(q^r\\) in the following way: let \\(R_{ir} = q_i^\\prime a_r\\), \\(\\tilde{q}_r = a_r - \\sum_{i=1}^{r-1} R_{ir}q_i\\), and \\(R_rr = {\\left \\vert \\left \\vert \\tilde{q}_r \\right \\vert \\right \\vert}_2\\). Then \\(q_r = \\frac{\\tilde{q}_r}{R_{rr}}\\). (Note: \\(\\tilde{q}_r \\neq 0\\) since the \\(a_i\\)s are linearly independent, and \\(q_i\\) is given as a linear combination of \\(a_1, \\ldots, a_i\\).) Assume the result holds for \\(i \\le r-1\\). I.e. we have vectors \\(q_1, \\ldots, q_{r-1}\\) given as above, and that \\(\\text{span}\\{q_1, \\ldots, q_{r-1}\\} = \\text{span}\\{a_1, \\ldots, a_{r-1}\\}\\), \\(q_i \\cdot q_j\\) for all \\(i,j = 1, \\ldots, r-1\\) with \\(i \\neq j\\), \\(q_i^\\prime \\cdot q_i = 1\\) for all \\(i = 1, \\ldots, r-1\\). Now, we want to show that we can construct a \\(q_r\\) such that \\(\\text{span}\\{q_1, \\ldots, q_r\\} = \\text{span}\\{a_1, \\ldots, a_r\\}\\), \\(q_r \\cdot q_j = 0\\) for all \\(j = 1, \\ldots, r-1\\), \\(q_r^\\prime \\cdot q_r = 1\\). We start from below. By definition of \\(q_r\\): \\(q_r^\\prime q_r = \\frac{\\tilde{q}_r^\\prime \\tilde{q}_r}{R_{rr}^2} = \\frac{{\\left \\vert \\left \\vert \\tilde{q}_r \\right \\vert \\right \\vert}^2}{R_{rr}^2} = 1\\). Let \\(i &lt; r\\). Then \\[\\begin{aligned} q_i^{\\prime} \\tilde{q}_r &amp;= q_i^\\prime a_r - \\sum_{j=1}^{r-1} R_{jr} q_i^\\prime q_j \\\\ &amp;= q_i^\\prime a_r - R_{ir} q_i^\\prime q_i \\\\ &amp;= q_i^\\prime a_r - R_{ir} = 0 \\text{ (by definition of } R_{ir}\\text{)}. \\end{aligned}\\] We need to show that \\(a_r\\) can be written as a linear combination of \\(q_i\\)s. \\[\\begin{aligned} \\sum_{i=1}^r R_{ir} q_i &amp;= \\sum_{i=1}^{r-1} R_{ir} q_i + R_{rr} q_r \\\\ &amp;= \\sum_{i=1}^{r-1} R_{ir} q_i + R_{rr} \\frac{1}{R_{rr}} \\tilde{q}_r \\\\ &amp;= \\sum_{i=1}^{r-1} R_{ir} q_i + R_{rr} \\frac{1}{R_{rr}} \\left(a_r - \\sum_{i=1}^{r-1} R_{ir}q_i \\right) \\\\ &amp;= \\sum_{i=1}^{r-1} R_{ir} q_i + a_r - \\sum_{i=1}^{r-1} R_{ir}q_i \\\\ &amp;= a_r. \\end{aligned}\\] Remark 1.1 (Intuitive side note) It is fairly easy to find \\(q_2\\). We want to find it such that \\(a_2 = R_{12}q_1 + R_{22} q_2\\), and \\({\\left \\vert \\left \\vert q_2 \\right \\vert \\right \\vert}_2 = 1\\) and \\(q_1 \\perp q_2\\), i.e. \\(q_1 \\cdot q_2 = 0\\). So, if we multiply the equation by \\(q_1\\), we get that \\(q_1 a_2 = R_{12}\\). Substituting this into the first equation, \\(q_2 = \\frac{a_2 - R_{12} q_1}{R_{22}}\\). Note that this is a circular argument, and hence not a formal way of doing this. Lecture 5: 9/20 (Finished up proof of The Gram-Schmidt Process (1.8)) Remark 1.2 (Gram-Schmidt in Matrix Form) If we write up \\(a_1, \\ldots, a_r\\) in a matrix, we see that \\[ \\begin{bmatrix} a_1 &amp; \\dots &amp; a_r \\end{bmatrix} = \\begin{bmatrix} q_1 &amp; \\dots &amp; q_r \\end{bmatrix} \\begin{bmatrix} R_{11} &amp; R_{12} &amp; \\dots &amp; R_{1r} \\\\ 0 &amp; R_{22} &amp; \\dots &amp; R_{2r} \\\\ \\vdots &amp; \\ddots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; \\ldots &amp; 0 &amp; R_{rr} \\end{bmatrix} \\] This is quite similar to the result we are after (the QR-decomposition 1.2). Proof (Proof of theorem 1.2). Since \\(\\text{rank}(A) = r\\), \\(A\\) has \\(r\\) linearly independent columns. Hence, there exists a permutation matrix \\(\\Pi\\) such that \\[ A \\Pi = \\begin{bmatrix} a_1 &amp; \\dots &amp; a_r &amp; a_{r+1} \\dots a_m \\end{bmatrix}, \\] where \\(a_1, \\ldots, a_r\\) are linearly independent, and \\(a_{r+1}, \\ldots, a_m\\) are linearly dependent on the first \\(r\\) columns. Using Gram-Schmidt (lemma 1.8), we know that there exists \\(\\tilde{Q} \\in {\\mathbb{R}}^{n \\times r}, R \\in {\\mathbb{R}}^{r \\times r}\\) such that \\(A\\Pi = \\tilde{Q} R\\). Since \\(\\text{span}\\{\\tilde{q}_1, \\ldots, \\tilde{q}_r\\}\\) (columns of \\(\\tilde{Q}\\)) is equal to \\(\\text{span}\\{a_1, \\ldots, a_r\\}\\), there exists an \\(s_{k(j-r+2)}\\) for any \\(j \\in \\{r+1, \\ldots, m\\}\\) and \\(k \\in \\{1, \\ldots, r\\}\\) such that \\(a_j = \\sum_{k=1}^r s_{k(j-r+2)}q_k\\). So, \\[ A\\Pi = \\tilde{Q} \\begin{bmatrix} R &amp; S \\end{bmatrix}. \\] This is almost the form we want, BUT \\(\\tilde{Q}\\) is not orthonormal (it is not square). However, we know that we can pick \\(n-r\\) vectors from \\({\\mathbb{R}}^n\\) such that adding these as columns to \\(\\tilde{Q}\\) we get a set of \\(n\\) linearly independent columns. Now, use Gram-Schmidt to normalize. Since the first \\(r\\) columns are already normalized, these will stay the same. The result is a matrix \\(Q\\), where the columns are all length \\(1\\), and they are all linearly independent. I.e. \\(Q^TQ = I\\). So, \\(A\\Pi = Q \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix}\\), hence \\[ A = Q \\begin{bmatrix} R &amp; S \\\\ 0 &amp; 0 \\end{bmatrix} \\Pi^T. \\] Basically, this gives us a way to perform QR decomposition. However, using the Gram-Schmidt procedure is NOT numerical stable. I.e. we might end up with matrices \\(Q, R\\), and \\(S\\) from which we CANNOT recover \\(A\\). To overcome this, there is a different method called the Modified Gram-Schmidt Procedure. Lemma 1.9 (The Modified Gram-Schmidt Procedure) HOMEWORK 1.6.4 Householder Definition 1.7 (Householder Reflections) A matrix \\(H = I - 2vv^\\prime\\), where \\({\\left \\vert \\left \\vert v \\right \\vert \\right \\vert}_2 = 1\\), is called a Householder Reflection. A Householder reflection takes any vector and reflects it over \\(\\{tv: t \\in {\\mathbb{R}}\\}\\). Lemma 1.10 Householder reflections are orthogonal matrices. Proof. HOMEWORK Lemma 1.11 There exists Householder refelctions \\(H_1, \\ldots, H_r\\) such that \\(H_r \\dots H_1 A\\Pi = R\\). Proof. Let \\(A\\Pi = \\begin{bmatrix} a_1 \\dots a_r \\end{bmatrix}\\). Choose \\(H_1\\) s.t. \\(H_1 a_1 = R_{11} e_1 = a_1 - 2v_1v_1^\\prime a_1\\) (last equality due to definition of Householder reflections). This is equivalent to \\(v_1(2v_1^\\prime a_1) = a_1 - R_{11}e_1\\). Now, let \\(v_1 = \\frac{a_1 - R_{11}e_1}{{\\left \\vert \\left \\vert a_1 - R_{11}e_2 \\right \\vert \\right \\vert}_2}\\). Plug this into the equation for \\(R_{11}e_1\\) above to get \\[ R_{11}e_1 = a_1 - \\frac{(a_1 - R_{11}e_1)}{{\\left \\vert \\left \\vert a_1 - R_{11}e_1 \\right \\vert \\right \\vert}_2}\\frac{a_1^\\prime a_1 - R_{11} a_1^\\prime e_1}{{\\left \\vert \\left \\vert a_1 - R_{11}e_1 \\right \\vert \\right \\vert}_2}. \\] If we multiply this by \\(e_1^\\prime\\) from the right, we get \\[ R_{11} = \\pm {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2, v_1 = \\frac{a_1 - {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}e_1}{{\\left \\vert \\left \\vert a_1 - {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2 e_1 \\right \\vert \\right \\vert}_2}. \\] \\[ H_1 = I - \\frac{a_1 - {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2e_1)(a_1 - {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2 e_1)}{{\\left \\vert \\left \\vert a_1 - {\\left \\vert \\left \\vert a_1 \\right \\vert \\right \\vert}_2 e_1 \\right \\vert \\right \\vert}_2^2} \\] 1.6.5 Givens Rotations Definition 1.8 (Givens Rotations) A Givens Rotation is a matrix \\(G^{(i,j)}\\) with entries \\((g_{ij})\\) such that \\(g_{ii} = g_{jj} = \\lambda\\) (the \\(i\\)th and \\(j\\)th elements of the diagonal are \\(\\lambda\\)). \\(g_{kk} = 1\\) for all \\(k \\notin \\{i,j\\}\\). (all other diagonal elements are \\(1\\)) \\(g_{ij} = g_{ji} = \\sigma\\) \\(g_{ij} = 0\\) for all other pairs of \\(i,j\\). In words: \\(G^{(i,j)}\\) is the identity matrix with the \\(i\\)th and \\(j\\)th diagonal elements made \\(\\lambda\\), and the entries at \\((i,j)\\) and \\((j,i)\\) are \\(\\sigma\\). Here we use the notion \\(Q_{i*}\\) to mean the \\(i\\)’th row, and \\(Q_{*j}\\) to mean the \\(j\\)’th column of \\(Q\\).↩ "],
["homework-assignments.html", "Chapter 2 Homework Assignments 2.1 Homework 1 2.2 Homework 2 2.3 Homework 3 2.4 Homework 4 2.5 Homework 5", " Chapter 2 Homework Assignments 2.1 Homework 1 Exercise 2.1 Can all nonnegative real numbers be represented in such a manner (i.e. as a fp number) for an arbitrary base \\(\\beta \\in \\{2,3,...\\}\\)? Solution. No. For any given \\(\\beta\\) and a largest exponent \\(e_{max}\\), any decimal larger than \\(\\beta\\cdot\\beta^{e_{max}}\\) is larger than the largest number possibly representated. Exercise 2.2 Suppose \\(e = -1\\), what are the range of numbers that can be represented for an arbitrary base \\(\\beta \\in \\{2,3,...\\}\\)? Solution. The smallest number that can be represented for an arbitrary base must be \\((0+0\\cdot \\beta^{-1} + ... + 0\\cdot\\beta^{-(p-1)})\\cdot\\beta^{-1}\\). Since \\(0 \\leq d_i &lt; \\beta, \\forall i\\), the largest value must be attained when \\(d_i = \\beta - 1\\) for all \\(i\\). I.e. the largest value must be \\[\\begin{align*} MAX &amp;= (\\beta-1 + (\\beta-1)\\beta^{-1} + ... + (\\beta-1)\\beta^{-(p-1)})\\cdot\\beta^{-1}\\\\ &amp;= (1+\\beta^{-1}+...+\\beta^{-(p-1)})(\\beta-1)\\cdot\\beta^{-1} \\\\ &amp;= (1+\\beta^{-1}+...+\\beta^{-(p-1)})\\cdot(1-\\beta^{-1}) \\\\ &amp;= (1+\\beta^{-1}+...+\\beta^{-(p-1)})\\cdot(1-\\beta^{-1}) \\end{align*}\\] Exercise 2.3 Characterize the numbers that have a unique representation in a base \\(\\beta \\in \\{2,3,...\\}\\). Solution. Let \\[f = \\left(d_1\\cdot\\beta^{-1} + \\ldots + d_{p-1}\\cdot\\beta^{-(p-1)}\\right)\\cdot\\beta^{e},\\] i.e. \\(f\\) is not normarlized. Then, \\[ f = \\left(d_1+d_2\\beta^{-1} + \\ldots + d_{p-1}\\cdot\\beta^{-p} + 0\\cdot \\beta^{-(p-1)}\\right)\\cdot\\beta^{e-1}. \\] So, non-normalized fp numbers are NOT unique. Now, let \\(f\\) be a normalized fp number. I.e. \\[ f = \\left(d_0 + d_1\\cdot\\beta^{-1} + \\ldots + d_{p-1}\\cdot\\beta^{-(p-1)} \\right)\\cdot\\beta^e, \\] where \\(d_0 \\neq 0\\). If we let \\(e_n &lt; e\\), then \\[ f &gt; \\left(d_0 + d_1\\cdot\\beta^{-1} + \\ldots + d_{p-1}\\cdot\\beta^{-(p-1)} \\right)\\cdot\\beta^{e_n}, \\] and if \\(e_n &gt; e\\), then \\[ f &lt; \\left(d_0 + d_1\\cdot\\beta^{-1} + \\ldots + d_{p-1}\\cdot\\beta^{-(p-1)} \\right)\\cdot\\beta^{e_n} \\] If we let \\[d_i^\\prime \\neq d_i\\] for some number of \\(i\\)’s, then \\[ f \\neq \\left(d_0^\\prime + d_1\\prime\\cdot\\beta^{-1} + \\ldots + d_{p-1}\\prime\\cdot\\beta^{-(p-1)} \\right)\\cdot\\beta^e. \\] Hence, normalized FP numbers are unique. Exercise 2.4 Write a function that takes a decimal number, base, and precision, and returns the closest normalized FP representation. I.e. a vector of digits and the exponent. Solution. The function provided in class is actually the solution (?). This is guarenteed to give a normalized FP representation. Using this algorithm gives \\(d_0 = \\lfloor \\frac{N}{\\beta^{\\lfloor log_{\\beta}\\left(N\\right) \\rfloor}}\\rfloor\\). It holds that \\(\\lfloor log_{\\beta}\\left(N\\right) \\rfloor \\le log_\\beta\\left(N\\right)\\), which implies that \\(\\beta^{\\lfloor log_{\\beta}\\left(N\\right) \\rfloor} \\le \\beta^{log_\\beta\\left(N\\right)} = N\\) (remember, \\(\\beta \\geq 2\\)). Hence, \\(d_0 &gt; 0\\). get_normalized_FP = function(number::Float64, base::Int64, prec::Int64) #number = 4; base = float(10); prec = 2 si=sign(number) base = float(base) e = floor(Int64,log(base,abs(number))) d = zeros(Int64,prec) num = abs(number)/(base^e) for j = 1:prec d[j] = floor(Int64,num) num = (num - d[j])*base end return &quot;The sign is $si, the exponent is $e, and the vector with d is $d&quot; end ## #5 (generic function with 1 method) Exercise 2.5 List all normalized fp numbers that can be representated given base, precision, \\(e_{min}\\), and \\(e_{max}\\). all_normalized_fp = function(base::Int64, prec::Int64, emin::Int64, emax::Int64) ## Number of possible values for each e: N = (base-1)*base^(prec-1)#*(emax-emin+1) out=zeros(Int64, N, prec, emax-emin+1) es = emin:emax for e=1:length(es) for b0=1:(base-1) for i=1:(base^(prec-1)) out[(b0-1)*(base^(prec-1))+i,1,e] = b0 for j=1:(prec-1) out[(b0-1)*(base^(prec-1))+i,prec-j+1,e] = floor((i-1)/base^(j-1))%base end end end end return(out) end ## #7 (generic function with 1 method) 2.2 Homework 2 Exercise 2.6 Lookup the 64 bit standard to find allowed exponents. Solution. According to Wikipedia, the allowed exponents for the 64 bit standard are \\(-1022,\\ldots, 1023\\). Exercise 2.7 What is the smallest non-normalized positive value for the 64 bit standard? Solution. The smallest non-normalized positive value is \\[ \\left(0 + 0\\cdot 2^{-1} + \\ldots + 0\\cdot 2^{-51} + 1\\cdot 2^{-52} \\right )\\cdot 2^{-1022} = 2^{-1074} \\approx 4.94\\cdot 10^{324} \\] Exercise 2.8 What is the smallest normalized positive value? Solution. The smallest normalized positive value is \\[ \\left(1 + 0\\cdot 2^{-1} + \\ldots + 0\\cdot 2^{-52} \\right )\\cdot 2^{-1022} = 2^{-1022} \\approx 2.23 \\cdot 10^{308} \\] Exercise 2.9 What is the largest normalized positive value? Solution. The largest normalized finite value is \\[ \\left(1 + 1\\cdot 2^{-1} + \\ldots + 1\\cdot 2^{-52} \\right )\\cdot 2^{-1022} \\approx 1.80\\cdot 10^{308}. \\] Exercise 2.10 Is there a general formula for determining the largest positive value for a given base \\(\\beta\\), precision \\(p\\), and largest exponent \\(e_{max}\\)? Solution. The largest positive, finite value is \\[ \\left(\\sum_{i=0}^{p-1} (\\beta-1)\\beta^{-i}\\right)\\cdot \\beta^{e_{max}}. \\] Exercise 2.11 Verify the smallest non-normalized, positive number that can be represented. nextfloat(Float64(0)) == 2^(-1074) ## true Exercise 2.12 Verify the smallest normalized, positive number that can be represented. Exercise 2.13 Verify the largest, finite number that can be represented. prevfloat(Float64(Inf)) ## 1.7976931348623157e308 Exercise 2.14 Proof lemma (bound of relative error). Exercise 2.15 What happens with lemmas (bounds of absolute and relative error) if we consider negative numbers? Solution. They still hold. Let \\(z^\\prime = -z\\). Then \\(fl(z^\\prime) = -fl(z)\\). Hence, \\[ \\left| fl(z^\\prime) - z^\\prime \\right | = \\left | -fl(z) + z \\right | = \\left | fl(z) - z \\right |, \\] hence the bounds still hold. Exercise 2.16 Show that \\(\\left|\\left| A \\right|\\right|_1 =\\) max of the \\(l^1\\) norms of the columns of \\(A\\). Exercise 2.17 Show that \\(\\left|\\left| A \\right|\\right|_\\infty =\\) max of the \\(l^1\\) norms of the rows of \\(A\\). Exercise 2.18 Assume the Fundamental Axiom. Show the following: \\[\\left|\\left| fl(A)-A \\right|\\right|_p \\leq u \\left|\\left|A\\right|\\right|_p\\] Solution. \\[\\begin{align*} \\left | \\left | fl(A) - A \\right | \\right |_p &amp;= \\left|\\left| \\left [ fl(a_{ij}) - a_{ij} \\right ] \\right|\\right|_p \\\\ &amp;\\leq \\left|\\left| \\left[u\\cdot a_{ij}\\right]\\right|\\right|_p \\\\ &amp;= \\left|\\left| u\\cdot A\\right|\\right|_p = u\\left|\\left|A\\right|\\right| \\end{align*}\\] 2.3 Homework 3 Exercise 2.19 Prove lemma 1.5. Proof. Recall that a matrix \\(A\\) is invertible if and only if \\(Ax = 0\\) implies that \\(x = 0\\). So to check that \\(I-F\\) is invertible, we check this: \\[ (I-F)x = x-Fx \\Rightarrow x = Fx \\Rightarrow {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}_p \\leq {\\left \\vert \\left \\vert F \\right \\vert \\right \\vert}_p {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}_p. \\] Since \\({\\left \\vert \\left \\vert F \\right \\vert \\right \\vert}_p &lt; 1\\) by assumption, the only solution to the inequality above is \\(x = 0\\). So, \\(I-F\\) is invertible. Exercise 2.20 Consider Theorem and Lemmas under “Square Linear Systems”. What happens if we use \\(l^{1}\\)-norm instead? Exercise 2.21 Generate examples that show the bound in ??? is too conservative. Exercise 2.22 Generate examples that show the bound is nearly achieved Exercise 2.23 For motivating problems 1-5, when is \\(x\\) unique? Exercise 2.24 For motivating problem 5, what happens if \\(p\\geq m\\)? Explore the case where \\(m &gt;&gt; n\\). Exercise 2.25 Suppose \\(R \\in {\\mathbb{R}}^{m\\times m}\\) is an upper triangular matrix with \\(R_{ii} \\neq 0\\) for all \\(i = 1,\\ldots, n\\). Is \\(R\\) invertible? Solution. Since \\(R\\) is an upper triangular matrix, \\(\\det(R) = \\prod_{i=1}^{m} R_{ii} &gt; 0\\). Hence, \\(R\\) is invertible. Exercise 2.26 Assume \\(R\\) is an invertible upper triangular matrix. Implement a solution to invert \\(R\\). 2.4 Homework 4 Exercise 2.27 In the solution to 1.2, why do \\(0\\) rows on the left-hand side of (1.1) correspond to \\(0\\) entries of the \\(c\\) vector on the right-hand side. Exercise 2.28 Let \\(Q\\) be an orthogonal matrix. Show that \\({\\left \\vert \\left \\vert Qx \\right \\vert \\right \\vert}_2 = {\\left \\vert \\left \\vert x \\right \\vert \\right \\vert}_2\\). Exercise 2.29 Let f be a vector-valued function over \\({\\mathbb{R}}^d\\). When is \\[\\min_x {\\left \\vert \\left \\vert f(x) \\right \\vert \\right \\vert}_2 = \\min_x {\\left \\vert \\left \\vert f(x) \\right \\vert \\right \\vert}_2^2.\\] Exercise 2.30 Prove that \\(P^T P + I\\) from solution to example 1.4 is invertible. Exercise 2.31 Write out the solution to example 1.6. Also consider the case where \\(p \\ge m\\). Exercise 2.32 For all motivating problems, implement solutions. For the following, assume \\(A \\in {\\mathbb{R}}^{n\\times m}\\) with \\(\\text{rank}(A) = m\\), and \\(b \\in {\\mathbb{R}}^n\\). Let \\(C = \\begin{bmatrix} A b \\end{bmatrix}\\). Exercise 2.33 What does the last column of \\(R\\) (from the QR decomposition of \\(C\\)) represent? Exercise 2.34 What does the last entry of last column of \\(R\\) (from the QR decomposition of \\(C\\)) represent? Exercise 2.35 How can this be used in computation? 2.5 Homework 5 Exercise 2.36 Implement the Gram-Schmidt procedure for matrices \\(A \\in {\\mathbb{R}}^{n \\times m}\\) assuming \\(A\\) has full column rank. Create examples to show that the function works (well enough). Exercise 2.37 Find examples where Gram-Schmidt fails, i.e. where either \\(Q R \\neq A\\) or \\(Q^TQ \\neq I\\). Exercise 2.38 Look up the modified Gram-Schmidt Procedure and implement it (again assuming \\(A\\) has full column rank). Exercise 2.39 (Pivoting (OPTIONAL)) References: Businger, Galub: Linear Least Squares by Householder Transformation (1965) Engler: The Behavior of QR-factorization algorithm with column pivoting (1997) Implement modified Gram-Schmidt with column pivoting. Find example where the modified Gram-Schmidt fails, but the modified Gram-Schmidt with column pivoting does not. Exercise 2.40 Show that Householder reflections are orthogonal matrices. Solution. Show that \\(H^\\prime H = I\\). Exercise 2.41 Show that \\(\\begin{bmatrix} H_r \\cdots h_1 \\end{bmatrix}\\) is orthogonal. Exercise 2.42 Show that a Givens rotation is an orthonormal matrix when \\(\\sigma^2 + \\lambda^2 = 1\\). "]
]
